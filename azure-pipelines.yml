trigger:
- develop

variables:
- group: jfrog-artifactory

strategy:
  matrix:
#    linux-debug:
#      imageName: 'ubuntu-18.04'
#      BUILD_CONFIGURATION: Debug
#      MULTITHREADING: False
#      DISABLE_LLVM_CONFIG: True
#    linux-release:
#      imageName: 'ubuntu-18.04'
#      BUILD_CONFIGURATION: RelWithDebInfo
#      MULTITHREADING: False
#      DISABLE_LLVM_CONFIG: True
#    mac-debug:
#      imageName: 'macos-10.14'
#      BUILD_CONFIGURATION: Debug
#      MULTITHREADING: False
#      DISABLE_LLVM_CONFIG: True
#    mac-release:
#      imageName: 'macos-10.14'
#      BUILD_CONFIGURATION: RelWithDebInfo
#      MULTITHREADING: False
#      DISABLE_LLVM_CONFIG: True
    windows-debug:
      imageName: 'vs2017-win2016'
      BUILD_CONFIGURATION: Debug
      MULTITHREADING: False
      BUILD_ARCH: x86_64
      VSINSTALL: "Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build"
      MSVC_PLATFORM: amd64
      LLVM_PKG_NAME: 'llvm-windows_vs17-x86_64-debug'
      LLVM_PKG_VERSION: '10.0.0'
    windows-release:
      imageName: 'vs2017-win2016'
      BUILD_CONFIGURATION: RelWithDebInfo
      MULTITHREADING: False
      BUILD_ARCH: x86_64
      VSINSTALL: "Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build"
      MSVC_PLATFORM: amd64
      LLVM_PKG_NAME: 'llvm-windows_vs17-x86_64-relwithdebinfo'
      LLVM_PKG_VERSION: '10.0.0'

pool:
  vmImage: $(imageName)


steps:
- powershell: gci env:* | sort-object name

- bash: |
    mkdir -p $HOME/.inaos/cmake
    mkdir -p $HOME/INAOS
    echo "INAC_REPOSITORY_LOCAL=$HOME/INAOS" > $HOME/.inaos/cmake/repository.txt
    echo "INAC_REPOSITORY_REMOTE=https://inaos.jfrog.io/inaos/libs-release-local/inaos" >> $HOME/.inaos/cmake/repository.txt
    echo "INAC_REPOSITORY_USRPWD=licensed:AKCp5bBraH7CasbsYCURsjzkbjXwVwdYcT7u39EiuL6GjnK1VKfKQWCd1E2E64mHokU5YUHku" >> $HOME/.inaos/cmake/repository.txt
    git submodule update --init --recursive
  displayName: Clone repos

- bash: |
    if [ "$AGENT_OS" == "Darwin" ]
      then
        echo "##vso[task.prependpath]$CONDA/bin"
    fi
    if [ "$AGENT_OS" == "Windows_NT" ]
      then
        echo "##vso[task.prependpath]$CONDA/Scripts"
    fi
  displayName: Add conda to PATH

- bash: |
    if [ "$AGENT_OS" == "Darwin" ]
      then
        sudo chown -R $USER $CONDA
      fi
  displayName: Take ownership of conda installation

- bash: |
    conda create --yes --quiet --name iArrayEnv
    source activate iArrayEnv
    conda install -y --name iArrayEnv -c intel mkl-include
    conda install -y --name iArrayEnv -c intel mkl-static
    conda install -y --name iArrayEnv -c intel icc_rt
    if [ "$AGENT_OS" != "Windows_NT" ]
      then
        conda install -y --name iArrayEnv -c numba llvmdev
    fi
  displayName: Download dependencies
  env:
    jfrog_artifactory_uid: $(jfrog_artifactory_uid)
    jfrog_artifactory_pwd: $(jfrog_artifactory_pwd)

- task: UniversalPackages@0
  inputs:
    command: 'download'
    downloadDirectory: '$(System.DefaultWorkingDirectory)'
    feedsToUse: 'internal'
    vstsFeed: '65aabbd8-5a8b-4afa-b586-7b3e6ab8d54e'
    vstsFeedPackage: '$(LLVM_PKG_NAME)'
    vstsPackageVersion: '$(LLVM_PKG_VERSION)'
  env:
    LLVM_PKG_NAME: $(LLVM_PKG_NAME)
    LLVM_PKG_VERSION: $(LLVM_PKG_VERSION)
  condition:
    eq( variables['Agent.OS'], 'Windows_NT' )

- bash: |
    unzip ${LLVM_PKG_NAME}-${LLVM_PKG_VERSION}.zip
  env:
    LLVM_PKG_NAME: $(LLVM_PKG_NAME)
    LLVM_PKG_VERSION: $(LLVM_PKG_VERSION)
  condition:
    eq( variables['Agent.OS'], 'Windows_NT' )

- bash: |
    if [ "$AGENT_OS" != "Windows_NT" ]
      then
        mkdir cmake-build-$BUILD_CONFIGURATION
        cd cmake-build-$BUILD_CONFIGURATION
        cmake ../ -DCMAKE_BUILD_TYPE=$BUILD_CONFIGURATION  -DMULTITHREADING=$MULTITHREADING -DDISABLE_LLVM_CONFIG=$DISABLE_LLVM_CONFIG -DLLVM_ROOT=$CONDA/envs/iArrayEnv
        make -j
    fi
  displayName: Compile
  env:
    BUILD_CONFIGURATION: $(BUILD_CONFIGURATION)
    MULTITHREADING: $(MULTITHREADING)

- script: |
    call "C:\Program Files (x86)\%VSINSTALL%\vcvarsall.bat" %MSVC_PLATFORM%
    mkdir cmake-build-%BUILD_CONFIGURATION%
    cd cmake-build-%BUILD_CONFIGURATION%
    cmake -G "NMake Makefiles" ../ -DCMAKE_BUILD_TYPE=%BUILD_CONFIGURATION%  -DMULTITHREADING=%MULTITHREADING% -DINAC_TARGET_ARCH=%BUILD_ARCH% -DLLVM_DIR=%LLVM_PKG_NAME%-%LLVM_PKG_VERSION%/lib/cmake/llvm
    nmake
  displayName: Compile
  env:
    BUILD_CONFIGURATION: $(BUILD_CONFIGURATION)
    BUILD_ARCH: $(BUILD_ARCH)
    LLVM_PKG_NAME: $(LLVM_PKG_NAME)
    LLVM_PKG_VERSION: $(LLVM_PKG_VERSION)
    MULTITHREADING: $(MULTITHREADING)
  condition:
    eq( variables['Agent.OS'], 'Windows_NT' )

- bash: |
    cd cmake-build-$BUILD_CONFIGURATION
    if [ "$AGENT_OS" == "Darwin" ] && [ "$BUILD_CONFIGURATION" == "Debug" ]
      then
        echo "Tests for Darwin in Debug mode currently not executed"
    else
        ./tests
    fi
  displayName: Execute tests
  env:
    INAC_TRACE: ""

- bash: |
    cd cmake-build-$BUILD_CONFIGURATION
    if [ "$AGENT_OS" == "Darwin" ] && [ "$BUILD_CONFIGURATION" == "Debug" ]
      then
        echo "Examples for Darwin in Debug mode currently not executed"
    else
      if [ "$AGENT_OS" == "Windows_NT" ]
        then
          for EX in $(ls example_*.exe); do ./$EX; done
      else
        for EX in $(ls example_*); do ./$EX; done
      fi
    fi
  displayName: Execute examples


- bash: |
   cd cmake-build-$BUILD_CONFIGURATION
   if [ "$AGENT_OS" != "Windows_NT" ]
     then
       cpack
       zip -d iarray*.zip */bin/perf*
       zip -d iarray*.zip */doc/*
       zip -d iarray*.zip */include/caterva.h
       zip -d iarray*.zip */lib/*caterva*
       cp iarray*.zip $IA_ARTIFACT_TARGET
   fi
  displayName: Create package
  env:
    IA_ARTIFACT_TARGET: $(Build.ArtifactStagingDirectory)

- script: |
    call "C:\Program Files (x86)\%VSINSTALL%\vcvarsall.bat" %MSVC_PLATFORM%
    cd cmake-build-%BUILD_CONFIGURATION%
    call "C:\Program Files\CMake\bin\cpack.exe"
    FOR %%f IN (iarray*.zip) DO (
      7z d %%f */bin/perf*
      7z d %%f */doc/* -r
      7z d %%f */include/caterva.h
      7z d %%f */lib/*caterva*
      copy %%f %IA_ARTIFACT_TARGET%
    )
  displayName: Create package
  env:
    IA_ARTIFACT_TARGET: $(Build.ArtifactStagingDirectory)
  condition:
    eq( variables['Agent.OS'], 'Windows_NT' )

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: iarray-$(imageName)

- bash: |
    cd cmake-build-$BUILD_CONFIGURATION
    src=`ls iarray*.zip`
    artifact_name=`basename $src`
    if [ "$AGENT_OS" == "Darwin" ]
      then
        artifact_version=`echo $artifact_name | grep -Eo '\d+\.\d+\.\d+'`
    else
        artifact_version=`echo $artifact_name | grep -Po '\d+\.\d+\.\d+'`
    fi
    target=inaos/iarray/$artifact_version/$artifact_name
    url=$jfrog_repository_url/$target
    curl "-u$jfrog_artifactory_uid:$jfrog_artifactory_pwd" "-T" $src $url
  displayName: Upload to artifactory
  env:
    jfrog_artifactory_uid: $(jfrog_artifactory_uid)
    jfrog_artifactory_pwd: $(jfrog_artifactory_pwd)
    jfrog_repository_url: $(jfrog_repository_url)
  condition:
    eq( variables['upload_artifactory'], 'yes' )

